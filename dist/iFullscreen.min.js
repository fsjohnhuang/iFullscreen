var iFullscreen =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFullscreenElement = getFullscreenElement;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.exitFullscreen = exports.requestFullscreen = exports.isFullscreenEnabled = exports.isFullscreen = void 0;

var napi = _interopRequireWildcard(__webpack_require__(1));

var polyfill = _interopRequireWildcard(__webpack_require__(2));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/*!
 * @version 0.2.0
 * @author fsjohnhuang
 * @email fsjohnhuang@hotmail.com
 * @ref https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API
 *      http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/fullscreen.html
 * @compatibility IE11+
 * @remark Native Fullscreen API has these pitfalls listed below:
 *         1. The Fullscreen API is disabled in `file` protocol.
 *         2. :fullscreen,:-moz-full-screen,:-webkit-full-screen,:-ms-fullscreen,::backdrop and ::-ms-backdrop would become effective when invoke the requestFullscreen API by JS only.(that is press F11 would not work)
 *         3. Events fullscreenchange and fullscreenerror would be fired when invokes requestFullscreen method to make the element be displayed full-screen only. So press F11 would not trigger those events above.
 *         4. Event fullscreenchange would be fired before window.resize event.
 */

/** PROPERTIES  **/
var isFullscreen = polyfill.isFullscreen;
exports.isFullscreen = isFullscreen;
var isFullscreenEnabled = napi.isFullscreenEnabled;
exports.isFullscreenEnabled = isFullscreenEnabled;

function getFullscreenElement() {
  var el = napi.getFullscreenElement();

  if (el == null && isFullscreen()) {
    el = polyfill.getFullscreenElement();
  }

  return el;
}
/** METHODS  **/


var requestFullscreen = napi.requestFullscreen;
exports.requestFullscreen = requestFullscreen;
var exitFullscreen = napi.exitFullscreen;
exports.exitFullscreen = exitFullscreen;
var CUST_EVENT_TYPE = "ifullscreenchange";

function addEventListener(eventType, f) {
  napi.addEventListener(eventType, f);
  document.addEventListener(CUST_EVENT_TYPE, f); // fire ifullscreechange event when add first event listener

  addEventListener.queue = (addEventListener.queue || 0) + 1;

  if (addEventListener.queue == 1) {
    detect();
  }
}

function removeEventListener(eventType, f) {
  napi.removeEventListener(eventType, f);
  document.removeEventListener(CUST_EVENT_TYPE, f);
}
/** INITIALIZE  **/


var gIsActive = false;

function detect() {
  var currState = isFullscreen();

  if (currState != gIsActive) {
    gIsActive = currState;
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(CUST_EVENT_TYPE, false, false, null);
    document.dispatchEvent(evt);
  }
}

napi.addEventListener("fullscreenchange", function (_) {
  gIsActive = isFullscreen();
});
window.addEventListener("resize", detect);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFullscreen = isFullscreen;
exports.getFullscreenElement = getFullscreenElement;
exports.isFullscreenEnabled = isFullscreenEnabled;
exports.requestFullscreen = requestFullscreen;
exports.exitFullscreen = exitFullscreen;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;

/*************************************************
 * Native API wrapper
 *************************************************/
var rNative = /\{\s*\[native\s+code\]\s*\}/i;

function isNative(f) {
  var src = f + '';
  return rNative.test(src);
}
/** PROPERTIES  **/


var isFullscreenImpls = ["fullscreen", "mozFullScreen", "webkitIsFullScreen", "msFullscreenElement"];
/* @description indicates displayed full-screen or not
 * @returns {Boolean}
 * @remark allways returns false out of the scope of fullscreenchange event handler
 */

function isFullscreen() {
  for (var i = 0, l = isFullscreenImpls.length; i < l; i++) {
    var impl = isFullscreenImpls[i];

    if (impl in document) {
      return !!document[impl];
    }
  }
}

var getFullscreenElementImpls = ["fullscreenElement", "mozFullScreenElement", "webkitFullscreenElement", "msFullscreenElement"];

function getFullscreenElement() {
  for (var i = 0, l = getFullscreenElementImpls.length; i < l; i++) {
    var impl = getFullscreenElementImpls[i];

    if (impl in document) {
      return document[impl];
    }
  }
}

var isFullscreenEnabledImpls = ["fullscreenEnabled", "mozFullScreenEnabled", "webkitFullscreenEnabled", "msFullscreenEnabled"];

function isFullscreenEnabled() {
  for (var i = 0, l = isFullscreenEnabledImpls.length; i < l; i++) {
    var impl = isFullscreenEnabledImpls[i];

    if (impl in document) {
      return document[impl];
    }
  }

  return false;
}
/** METHODS  **/


var requestFullscreenImpls = ["requestFullscreen", "mozRequestFullScreen", "webkitRequestFullscreen", "msRequestFullscreen"];
/* @description issues an asynchronous request to make the element be displayed full-screen.
 * @param {HTMLElement} [el=document.documentElement] - the element be displayed full-screen. the whole page is defualt value.
 * @remark the parameter el must be the built-in standard HTML elements(that is elements in the HTML namespace), <svg>, <math> and iframe with allowfullscreen attribute which are located in the top-level document, otherwise would be displayed full-screen.(eg. <object> and elements in <frame> could not be displayed full-screen)
 */

function requestFullscreen(el) {
  el = el || document.documentElement;
  var executed = false;

  for (var i = 0, l = requestFullscreenImpls.length; !executed && i < l; i++) {
    var impl = requestFullscreenImpls[i];

    if (isNative(el[impl])) {
      executed = true;
      el[impl]();
    }
  }
}

var exitFullscreenImpls = ["exitFullscreen", "mozCancelFullScreen", "webkitExitFullscreen", "msExitFullscreen"];

function exitFullscreen() {
  var executed = false;

  for (var i = 0, l = exitFullscreenImpls.length; !executed && i < l; i++) {
    var impl = exitFullscreenImpls[i];

    if (isNative(document[impl])) {
      executed = true;
      document[impl]();
    }
  }
}
/** EVENTS **/

/* @usage
 *   addEventListener("fullscreenchange", function(evt){
 *    if (isFullscree()){
 *      let el = getFullscreenElement()
 *      // your bussiness logic
 *    }
 *   })
 *   requestFullscreen()
 */


var EVENT_TYPES = ["fullscreenchange", "fullscreenerror"];

function addEventListener(eventType, f) {
  if (!~EVENT_TYPES.indexOf(eventType)) throw Error("Support fullscreenchange and fullscreenerror event only!");

  if (EVENT_TYPES[0] === eventType) {
    onFullscreenchange(f);
  } else {
    onFullscreenerror(f);
  }
}

function removeEventListener(eventType, f) {
  if (!~EVENT_TYPES.indexOf(eventType)) throw Error("Support fullscreenchange and fullscreenerror event only!");

  if (EVENT_TYPES[0] === eventType) {
    offFullscreenchange(f);
  } else {
    offFullscreenerror(f);
  }
}

var onFullscreenchangeImpls = ["onfullscreenchange", "onmozfullscreenchange", "onwebkitfullscreenchange", "onmsfullscreenchange"];

function onFullscreenchange(f) {
  for (var i = 0, l = onFullscreenchangeImpls.length; i < l; i++) {
    var impl = onFullscreenchangeImpls[i];

    if (impl in document) {
      document.addEventListener(impl.replace(/^on/, ""), f);
      return;
    }
  }
}

function offFullscreenchange(f) {
  for (var i = 0, l = onFullscreenchangeImpls.length; i < l; i++) {
    var impl = onFullscreenchangeImpls[i];

    if (impl in document) {
      document.removeEventListener(impl.replace(/^on/, ""), f);
      return;
    }
  }
}

var onFullscreenerrorImpls = ["onfullscreenerror", "onmozfullscreenerror", "onwebkitfullscreenerror", "onmsfullscreenerror"];

function onFullscreenerror(f) {
  for (var i = 0, l = onFullscreenerrorImpls.length; i < l; i++) {
    var impl = onFullscreenerrorImpls[i];

    if (impl in document) {
      document.addEventListener(impl.replace(/^on/, ""), f);
      return;
    }
  }
}

function offFullscreenerror(f) {
  for (var i = 0, l = onFullscreenerrorImpls.length; i < l; i++) {
    var impl = onFullscreenerrorImpls[i];

    if (impl in document) {
      document.removeEventListener(impl.replace(/^on/, ""), f);
      return;
    }
  }
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFullscreen = isFullscreen;
exports.getFullscreenElement = getFullscreenElement;

/*************************************************
 * Fixes the pitfalls of native Fullscreen API
 *************************************************/
function isFullscreen() {
  var oh = window.outerHeight,
      ow = window.outerWidth,
      sh = screen.height,
      sw = screen.width;
  return oh == sh && ow == sw;
}

function getFullscreenElement() {
  return document.documentElement;
}

/***/ })
/******/ ]);